const Expense = require('../models/Expense');
const Category = require('../models/Category');
const Budget = require('../models/Budget');
const User = require('../models/User');
const PDFDocument = require('pdfkit');
const path = require('path');

exports.generateReport = async (req, res) => {
    try {
        const { startDate, endDate, format } = req.query;

        if (!startDate || !endDate || !format) {
            return res.status(400).json({ error: 'Start date, end date, and format are required' });
        }

        // Retrieve all the data from DB
        const userId = req.user.id;
        const user = await User.findById(userId).lean();
        const expenses = await Expense.find({
            user: userId,
            date: {
                $gte: new Date(startDate),
                $lte: new Date(endDate)
            }
        }).lean();

        const categories = await Category.find({ user: userId }).lean();
        const budgets = await Budget.find({ user: userId }).lean();

        if (format === 'pdf') {
            const doc = new PDFDocument({ margin: 30, size: 'A4' });

           
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename="expense_report.pdf"`);

            doc.pipe(res);

            
            doc.fontSize(24).text('Expense Report', { align: 'center', underline: true });
            doc.moveDown();

          
            doc.fontSize(12).text(`User: ${user.name || 'N/A'}`, { align: 'left' });
            doc.text(`Email: ${user.email}`, { align: 'left' });
            doc.text(`Report Period: ${startDate} to ${endDate}`);
            doc.moveDown();

        
            doc.fontSize(18).text('Summary', { underline: true });
            const totalSpent = expenses.reduce((total, expense) => total + expense.amount, 0);
            doc.text(`Total Spent: $${totalSpent}`, { align: 'left' });
            doc.moveDown();

            
            doc.fontSize(18).text('Budgets & Spending', { underline: true });
            budgets.forEach(budget => {
                const categoryExpenses = expenses.filter(exp => exp.category === budget.category);
                const spentInCategory = categoryExpenses.reduce((sum, exp) => sum + exp.amount, 0);
                doc.text(`Category: ${budget.category}`);
                doc.text(`Budget: $${budget.amount}`);
                doc.text(`Spent: $${spentInCategory}`);
                doc.text(`Remaining: $${budget.amount - spentInCategory}`);
                doc.moveDown();
            });

            
            doc.fontSize(18).text('Expense Details', { underline: true });
            expenses.forEach(expense => {
                doc.fontSize(12).text(`Date: ${expense.date.toDateString()}`);
                doc.text(`Category: ${expense.category}`);
                doc.text(`Amount: $${expense.amount}`);
                doc.text(`Notes: ${expense.notes || '-'}`);
                doc.text(`Payment Method: ${expense.paymentMethod || 'N/A'}`);
                doc.moveDown();
            });

            
            doc.fontSize(10).text('Generated by Expense Tracker App', { align: 'center', italic: true });
            doc.text(new Date().toDateString(), { align: 'center' });

          
            doc.end();
        } else {
            res.status(400).json({ error: 'Invalid format' });
        }
    } catch (error) {
        console.error('Error generating report:', error);
        res.status(500).json({ error: 'Error generating report' });
    }
};
